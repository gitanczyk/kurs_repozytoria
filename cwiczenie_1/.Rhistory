require("palmerpenguins", "ggplot2")
wykres <- ggplot(data = penguins) +
geom_point(x = bill_length_mm, y = flipper_length_mm)
require("ggplot2")
wykres <- ggplot(data = penguins) +
geom_point(aes(x = bill_length_mm, y = flipper_length_mm))
wykres
#| label: Pakiety
#| echo: false
#| output: true
wykres <- ggplot(data = penguins) +
geom_point(aes(x = bill_length_mm, y = flipper_length_mm))
#| label: Pakiety
#| echo: false
#| output: true
wykres <- ggplot(data = penguins) +
geom_point(aes(x = bill_length_mm, y = flipper_length_mm))
setwd("D:/LPP")
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE,
echo = TRUE)
PackageNames <- c("fuzzySim", "leaps", "ISLR", "psych","glmnet","cowplot",
"readr", "tidyverse", "stargazer", "RWeka", "dplyr",
"stringr", "dplyr",  "caret", "ggplot2", "lmtest",
"corrplot", "regclass", "tidyverse", "stargazer",
"magrittr", "moments", "caret", "ltm", "foreign",
"blorr", "Amelia", "glmnet", "ggplot2", "gridExtra",
"MASS", "reshape2", "reshape", "igraph", "stats", "broom",
"parallel", "doParallel", "naniar", "shipunov")
for (i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
# Załadowanie Danych
taxi_data <- readxl::read_excel("D:/LPP/taxi_dane.xlsx")
# Sprawdzenie Rozmiarów Zestawu Danych
dim(taxi_data)
# Brakujące Dane ---------------------------------------------------------------
taxi_data_missing <- Missing.map(taxi_data) |>
arrange(by_group = desc(total))
missing <- taxi_data_missing |>
filter(total != 0) |>
dplyr::select(var)
missing_count <- taxi_data_missing |>
filter(total != 0) |>
dplyr::select(var) |>
summarise(length(var)) |>
unlist() |>
unname()
missing_count <- taxi_data_missing |>
filter(total != 0) |>
dplyr::select(var) |>
summarise(length(var)) |>
unlist() |>
unname()
taxi_data_missing
taxi_data$trip_seconds
unique(taxi_data$trip_seconds)
unique(taxi_data$trip_seconds)
taxi_data_missing
unique(taxi_data$dropoff_location)
taxi_data_missing
DescTools::PlotMiss(taxi_data)
install.packages("DescTools")
library(DescTools)
DescTools::PlotMiss(taxi_data)
#| eval: true
#| echo: false
#| output: false
#| warning: false
#| error: false
#| include: false
setwd("D:/Kursy/Kurs Repozytoria/Cwiczenia/3_modelowanie/cwiczenie_1")
library(dplyr)
library(tidymodels)
library(dplyr)
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(parsnip)
library(readr)       # import danych
library(broom.mixed) # konwersja
library(dotwhisker)  # wizualizacja
library(dotwhisker)  # wizualizacja
library(rstanarm)
colnames(airquality) <- tolower(colnames(airquality))
air <-
airquality |>
as_tibble() |>
na.omit() |>
select(-day) |>
mutate(month = factor(month))
print(air)
air |> is.na() |> as_tibble() |> summarise_all(sum)
air |> str()
air |> summary()
ggcorr(air, palette = "RdBu", label = TRUE)
corr(air, palette = "RdBu", label = TRUE)
cor(air$temp, air$wind)
library(GGally)
ggcor(air$temp, air$wind)
ggcorr(air$temp, air$wind)
ggcorr(air, palette = "RdBu", label = TRUE)
hellwig <- function( y, x, method="pearson") {
requireNamespace("utils")
x <- as.data.frame(x)
cm <- stats::cor(x, method=method) # correlation matrix among indeps
cd <- stats::cor(x, y, method=method) # correlations with dependent
# list of combination vectors
k <- sapply( seq(2, length(x)), function(i)
utils::combn(length(x), i, simplify=FALSE) )
k <- do.call("c", k)
# function calculating individual capacities
hfun <- function(v)
{
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v,i])) )
}
h <- sapply(k, hfun)
data.frame( k = sapply( k, paste, collapse="-"),
h = sapply(h, sum),
stringsAsFactors=FALSE)
}
air |> str()
air |> summary()
hellwig(air$temp, c(air$wind, air$solar.r, air$ozone))
hellwig(air$temp, c(air$wind, air$solar.r, air$ozone), method="pearson")
hellwig(air$temp, data.frame(air$wind, air$solar.r, air$ozone), method="pearson")
optimal_subset <- hellwig(air$temp, data.frame(air$wind, air$solar.r, air$ozone), method="pearson")
optimal_subset
air$temp
air$wind
optimal_subset <- hellwig(air[temp], data.frame(air$wind, air$solar.r, air$ozone), method="pearson")
optimal_subset <- hellwig(air["temp"], data.frame(air$wind, air$solar.r, air$ozone), method="pearson")
optimal_subset <- hellwig(air["temp"], air["wind","solar.r","ozone"], method = "pearson")
optimal_subset <- hellwig(air["temp"],
air[c("wind", "solar.r", "ozone")],
method = "pearson")
View(hellwig)
hellwig <- function( y, x, method="pearson") {
requireNamespace("utils")
x <- as.data.frame(x)
cm <- stats::cor(x, method=method) # correlation matrix among indeps
cd <- stats::cor(x, y, method=method) # correlations with dependent
# list of combination vectors
k <- sapply( seq(2, length(x)), function(i)
utils::combn(length(x), i, simplify=FALSE) )
k <- do.call("c", k)
# function calculating individual capacities
hfun <- function(v)
{
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v,i])) )
}
h <- sapply(k, hfun)
data.frame( k = sapply( k, paste, collapse="-"),
h = sapply(h, sum),
stringsAsFactors=FALSE)
}
optimal_subset <- hellwig(air["temp"],
air[c("wind", "solar.r", "ozone")],
method = "pearson")
optimal_subset
optimal_subset <- hellwig(air["temp"],
matrix(air[c("wind", "solar.r", "ozone")]),
method = "pearson")
optimal_subset <- hellwig(as.array(air["temp"]),
matrix(air[c("wind", "solar.r", "ozone")]),
method = "pearson")
optimal_subset <- hellwig(as.array(air["temp"]),
as.array(air[c("wind", "solar.r", "ozone")]),
method = "pearson")
optimal_subset <- hellwig(air$temp,
air[c("wind", "solar.r", "ozone")],
method = "pearson")
optimal_subset
optimal_subset <- hellwig(air$wind,
air[c("temp", "solar.r", "ozone")],
method = "pearson")
(optimal_subset <- hellwig(air$wind,
air[c("temp", "solar.r", "ozone")],
method = "pearson"))
hellwig <- function(y, x, method = "pearson") {
requireNamespace("utils")
x <- as.data.frame(x)
cm <- stats::cor(x, method = method)
cd <- stats::cor(x, y, method = method)
k <- sapply(seq(2, ncol(x)), function(i) utils::combn(ncol(x), i, simplify = FALSE))
k <- do.call("c", k)
hfun <- function(v) {
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v, i])))
}
h <- sapply(k, hfun)
result <- data.frame(
k = sapply(k, function(comb) paste(names(x)[comb], collapse = "-")),
h = sapply(h, sum),
stringsAsFactors = FALSE
)
result[which.max(result$h), ]
}
best_model <- hellwig(air$wind, air[, c("temp", "solar.r", "ozone")], method = "pearson")
best_model_2 <- hellwig(air$ozone, air[, c("temp", "solar.r", "wind")], method = "pearson")
best_model_2
best_model_1 <- hellwig(air$wind, air[, c("temp", "solar.r", "ozone")], method = "pearson")
best_model_2 <- hellwig(air$ozone, air[, c("temp", "solar.r", "wind")], method = "pearson")
best_model_3 <- hellwig(air$solar.r, air[, c("temp", "ozone", "wind")], method = "pearson")
best_model_2 <- hellwig(air$temp, air[, c("ozone", "solar.r", "wind")], method = "pearson")
rbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
best_model_1 <- hellwig(air$wind, air[, c("temp", "solar.r", "ozone")], method = "pearson")
best_model_2 <- hellwig(air$ozone, air[, c("temp", "solar.r", "wind")], method = "pearson")
best_model_3 <- hellwig(air$solar.r, air[, c("temp", "ozone", "wind")], method = "pearson")
best_model_4 <- hellwig(air$temp, air[, c("ozone", "solar.r", "wind")], method = "pearson")
rbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
best_model_1
rbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
cbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
best_model_1
data.frame(c(best_model_1, best_model_2, best_model_3, best_model_4))
data.frame(best_model_1, best_model_2, best_model_3, best_model_4)
combined_models <- rbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
combined_models
best_model_1$target <- "wind"
best_model_2$target <- "ozone"
best_model_3$target <- "solar.r"
best_model_4$target <- "temp"
best_model_1 <- hellwig(air$wind, air[, c("temp", "solar.r", "ozone")], method = "pearson")
best_model_2 <- hellwig(air$ozone, air[, c("temp", "solar.r", "wind")], method = "pearson")
best_model_3 <- hellwig(air$solar.r, air[, c("temp", "ozone", "wind")], method = "pearson")
best_model_4 <- hellwig(air$temp, air[, c("ozone", "solar.r", "wind")], method = "pearson")
combined_models <- rbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
names(combined_models) <- c("k", "h", "target")
print(combined_models)
names(combined_models) <- c("k", "h", "target")
combined_models <- rbind(c(best_model_1, best_model_2, best_model_3, best_model_4))
print(combined_models)
# Combine all models into one data frame
combined_models <- rbind(best_model_1, best_model_2, best_model_3, best_model_4)
# Reset column names if needed (to avoid duplicated 'k' and 'h' from rbind)
names(combined_models) <- c("k", "h", "target")
# View the combined result
print(combined_models)
best_model_1
best_model_1 <- hellwig(air$wind, air[, c("temp", "solar.r", "ozone")], method = "pearson")
best_model_2 <- hellwig(air$ozone, air[, c("temp", "solar.r", "wind")], method = "pearson")
best_model_3 <- hellwig(air$solar.r, air[, c("temp", "ozone", "wind")], method = "pearson")
best_model_4 <- hellwig(air$temp, air[, c("ozone", "solar.r", "wind")], method = "pearson")
best_model_1$target <- "wind"
best_model_2$target <- "ozone"
best_model_3$target <- "solar.r"
best_model_4$target <- "temp"
# Combine all models into one data frame
combined_models <- rbind(best_model_1, best_model_2, best_model_3, best_model_4)
# Reset column names if needed (to avoid duplicated 'k' and 'h' from rbind)
names(combined_models) <- c("k", "h", "target")
# View the combined result
print(combined_models)
air$wind
name(air$wind)
colname(air$wind)
colnames(air$wind)
air$wind
air |> str()
air |> summary()
ggcorr(air, palette = "RdBu", label = TRUE)
ggcorr(air, palette = "RdBu", label = TRUE)
cor(air$temp, air$wind)
hellwig <- function(y, x, method = "pearson") {
requireNamespace("utils")
x <- as.data.frame(x)
cm <- stats::cor(x, method = method)
cd <- stats::cor(x, y, method = method)
k <- sapply(seq(2, ncol(x)), function(i) utils::combn(ncol(x), i, simplify = FALSE))
k <- do.call("c", k)
hfun <- function(v) {
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v, i])))
}
h <- sapply(k, hfun)
result <- data.frame(
k = sapply(k, function(comb) paste(names(x)[comb], collapse = "-")),
h = sapply(h, sum),
stringsAsFactors = FALSE
)
result[which.max(result$h), ]
}
cor(air$temp, air$wind)
hellwig <- function(y, x, method = "pearson") {
requireNamespace("utils")
x <- as.data.frame(x)
cm <- stats::cor(x, method = method)
cd <- stats::cor(x, y, method = method)
k <- sapply(seq(2, ncol(x)), function(i) utils::combn(ncol(x), i, simplify = FALSE))
k <- do.call("c", k)
hfun <- function(v) {
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v, i])))
}
h <- sapply(k, hfun)
result <- data.frame(
k = sapply(k, function(comb) paste(names(x)[comb], collapse = "-")),
h = sapply(h, sum),
stringsAsFactors = FALSE
)
result[which.max(result$h), ]
}
best_model_1 <- hellwig(air$wind, air[, c("temp", "solar.r", "ozone")], method = "pearson")
best_model_2 <- hellwig(air$ozone, air[, c("temp", "solar.r", "wind")], method = "pearson")
best_model_3 <- hellwig(air$solar.r, air[, c("temp", "ozone", "wind")], method = "pearson")
best_model_4 <- hellwig(air$temp, air[, c("ozone", "solar.r", "wind")], method = "pearson")
best_model_1$target <- "wind"
best_model_2$target <- "ozone"
best_model_3$target <- "solar.r"
best_model_4$target <- "temp"
# Combine all models into one data frame
combined_models <- rbind(best_model_1, best_model_2, best_model_3, best_model_4)
# Reset column names if needed (to avoid duplicated 'k' and 'h' from rbind)
names(combined_models) <- c("k", "h", "target")
# View the combined result
print(combined_models)
air %>%
ggplot(aes(
x = solar.r,
y = ozone,
col = month,
group = month
)) +
geom_point() +
geom_smooth(method = lm, se = F) +
scale_color_viridis_d(option = "C", end = .9)
print(combined_models)
air %>%
ggplot(aes(
x = ozone,
y = temp,
col = month,
group = month
)) +
geom_point() +
geom_smooth(method = lm, se = F) +
scale_color_viridis_d(option = "C", end = .9)
print(combined_models)
linear_reg() |>
set_engine("keras")
lm_mod <-
linear_reg() |>
set_engine("lm")
lm_fit <-
lm_mod |>
fit(ozone ~ temp + solar.r +wind, data = air)
lm_fit
lm_fit |> tidy(conf.int = T)
lm_fit$fit |> summary()
hellwig <- function(y, x, method = "pearson") {
requireNamespace("utils")
x <- as.data.frame(x)
cm <- stats::cor(x, method = method)
cd <- stats::cor(x, y, method = method)
k <- sapply(seq(2, ncol(x)), function(i) utils::combn(ncol(x), i, simplify = FALSE))
k <- do.call("c", k)
hfun <- function(v) {
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v, i])))
}
h <- sapply(k, hfun)
result <- data.frame(
k = sapply(k, function(comb) paste(names(x)[comb], collapse = "-")),
h = sapply(h, sum),
stringsAsFactors = FALSE
)
result[which.max(result$h), ]
}
# Generalized loop for all target variables
target_vars <- c("wind", "ozone", "solar.r", "temp")
predictor_sets <- lapply(target_vars, function(var) setdiff(names(air), var))
# Generate models dynamically for all target variables
models <- lapply(seq_along(target_vars), function(i) {
best_model <- hellwig(air[[target_vars[i]]], air[, predictor_sets[[i]]], method = "pearson")
best_model$target <- target_vars[i]
best_model
})
# Combine the results into one data frame
combined_models <- do.call(rbind, models)
names(combined_models) <- c("k", "h", "target")
print(combined_models)
combined_models <- do.call(rbind, models)
models <- lapply(seq_along(target_vars), function(i) {
best_model <- hellwig(air[[target_vars[i]]], air[, predictor_sets[[i]]], method = "pearson")
best_model$target <- target_vars[i]
best_model
})
is.na(air)
models <- lapply(seq_along(target_vars), function(i) {
best_model <- hellwig(air[[target_vars[i]]], air[, predictor_sets[[i]]], method = "pearson")
best_model$target <- target_vars[i]
best_model
})
air |> is.na() |> as_tibble() |> summarise_all(sum)
air |> is.na()
air |> is.na() |> as_tibble()
air |> is.na() |> as_tibble() |> summarise_all(sum)
air |> is.na() |> as_tibble() |> summarise_all(sum)
hellwig <- function(y, x, method = "pearson") {
requireNamespace("utils")
# Ensure 'x' is numeric
x <- x[sapply(x, is.numeric)]
x <- as.data.frame(x)
# Calculate correlation matrix
cm <- stats::cor(x, method = method)
cd <- stats::cor(x, y, method = method)
k <- sapply(seq(2, ncol(x)), function(i) utils::combn(ncol(x), i, simplify = FALSE))
k <- do.call("c", k)
hfun <- function(v) {
sapply(v, function(i) cd[i]^2 / sum(abs(cm[v, i])))
}
h <- sapply(k, hfun)
result <- data.frame(
k = sapply(k, function(comb) paste(names(x)[comb], collapse = "-")),
h = sapply(h, sum),
stringsAsFactors = FALSE
)
result[which.max(result$h), ]
}
# Generalized loop for all target variables
target_vars <- c("wind", "ozone", "solar.r", "temp")
predictor_sets <- lapply(target_vars, function(var) setdiff(names(air), var))
# Ensure all predictors are numeric
numeric_predictors <- lapply(predictor_sets, function(predictors) {
predictors[sapply(air[predictors], is.numeric)]
})
# Generate models dynamically for all target variables
models <- lapply(seq_along(target_vars), function(i) {
best_model <- hellwig(air[[target_vars[i]]], air[, numeric_predictors[[i]]], method = "pearson")
best_model$target <- target_vars[i]
best_model
})
# Combine the results into one data frame
combined_models <- do.call(rbind, models)
names(combined_models) <- c("k", "h", "target")
print(combined_models)
linear_reg() |>
set_engine("keras")
lm_mod <-
linear_reg() |>
set_engine("lm")
lm_fit <-
lm_mod |>
fit(ozone ~ temp + solar.r +wind, data = air)
lm_fit
lm_fit |> tidy(conf.int = T)
lm_fit$fit |> summary()
lm_fit
lm_fit |> tidy(conf.int = T)
```{r}
lm_fit |>
tidy() |>
dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2),
dot_args = list(size = 2, color = "black"),
whisker_args = list(color = "black")) +
theme_bw()
air |> str()
air |> summary()
new_points <- expand.grid(temp = seq(100, 200, 20),
solar.r = seq(340, 400, 15),
wind = seq(20, 100, 20))
mean_pred <- predict(object = lm_fit, new_data = new_points)
conf_pred <- predict(object = lm_fit, new_data = new_points, type = "conf_int")
lm_pred <-
new_points |>
bind_cols(mean_pred) |>
bind_cols(conf_pred)
lm_pred |>
ggplot(aes(x = ozone,
y = .pred)) +
geom_point() +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = 0.2) +
facet_wrap(~ wind) +
theme_bw() +
labs(y = "temperature")
lm_pred
lm_pred |>
ggplot(aes(x = temp,
y = .pred)) +
geom_point() +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = 0.2) +
facet_wrap(~ wind) +
theme_bw() +
labs(y = "temperature")
lm_pred |>
ggplot(aes(x = temp,
y = .pred)) +
geom_point() +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = 0.2) +
facet_wrap(~ wind) +
theme_bw() +
labs(y = "ozone")
# lm_fit
# lm_fit |> tidy(conf.int = T)
lm_fit$fit |> summary()
#| eval: true
#| echo: false
#| output: false
#| warning: false
#| error: false
#| include: false
setwd("D:/Kursy/Kurs Repozytoria/Cwiczenia/3_modelowanie/cwiczenie_1")
library(dplyr)
library(tidymodels)
