PackageNames <- c("olsrr", "stargazer", "httr", "jsonlite", "knitr",
"tidyverse", "stringr", "data.table", "plyr", "fuzzySim",
"leaps", "summarytools", "psych", "factoextra", "ggplot2",
"Hmisc")
for (i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
install.packages("gt")
iris[1:4, 1:4] |> gt::gt()
penguins
data <- palmerpenguins
data <- palmerpenguins()
install.packages("palmerpenguins")
require("palmerpenguins")
data <- palmerpenguins()
data <- data(package = 'palmerpenguins')
data
data(package = 'palmerpenguins')
head(penguins)
penguins
wykres <- ggplot(data = penguins) +
geom_point(x = bill_length_mm, y = flipper_length_mm)
require("palmerpenguins", "ggplot2")
wykres <- ggplot(data = penguins) +
geom_point(x = bill_length_mm, y = flipper_length_mm)
require("ggplot2")
wykres <- ggplot(data = penguins) +
geom_point(aes(x = bill_length_mm, y = flipper_length_mm))
wykres
#| label: Pakiety
#| echo: false
#| output: true
wykres <- ggplot(data = penguins) +
geom_point(aes(x = bill_length_mm, y = flipper_length_mm))
#| label: Pakiety
#| echo: false
#| output: true
wykres <- ggplot(data = penguins) +
geom_point(aes(x = bill_length_mm, y = flipper_length_mm))
setwd("D:/LPP")
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE,
echo = TRUE)
PackageNames <- c("fuzzySim", "leaps", "ISLR", "psych","glmnet","cowplot",
"readr", "tidyverse", "stargazer", "RWeka", "dplyr",
"stringr", "dplyr",  "caret", "ggplot2", "lmtest",
"corrplot", "regclass", "tidyverse", "stargazer",
"magrittr", "moments", "caret", "ltm", "foreign",
"blorr", "Amelia", "glmnet", "ggplot2", "gridExtra",
"MASS", "reshape2", "reshape", "igraph", "stats", "broom",
"parallel", "doParallel", "naniar", "shipunov")
for (i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
# Załadowanie Danych
taxi_data <- readxl::read_excel("D:/LPP/taxi_dane.xlsx")
# Sprawdzenie Rozmiarów Zestawu Danych
dim(taxi_data)
# Brakujące Dane ---------------------------------------------------------------
taxi_data_missing <- Missing.map(taxi_data) |>
arrange(by_group = desc(total))
missing <- taxi_data_missing |>
filter(total != 0) |>
dplyr::select(var)
missing_count <- taxi_data_missing |>
filter(total != 0) |>
dplyr::select(var) |>
summarise(length(var)) |>
unlist() |>
unname()
missing_count <- taxi_data_missing |>
filter(total != 0) |>
dplyr::select(var) |>
summarise(length(var)) |>
unlist() |>
unname()
taxi_data_missing
taxi_data$trip_seconds
unique(taxi_data$trip_seconds)
unique(taxi_data$trip_seconds)
taxi_data_missing
unique(taxi_data$dropoff_location)
taxi_data_missing
DescTools::PlotMiss(taxi_data)
install.packages("DescTools")
library(DescTools)
DescTools::PlotMiss(taxi_data)
install.packages("rlang")
install.packages("rlang")
packageVersion("rlang")
install.packages("rlang")
install.packages("rlang")
packageVersion("rlang")
.rs.restartR()
install.packages("rlang")
packageVersion("rlang")
setwd("D:/Kursy/Kurs Repozytoria/Cwiczenia/3_modelowanie/cwiczenie_2")
#| eval: true
#| echo: false
#| output: false
#| warning: false
#| error: false
#| include: false
library(dplyr)
library(tidymodels)
library(parsnip)
library(readr)       # import danych
library(broom.mixed) # konwersja
library(dotwhisker)  # wizualizacja
library(rstanarm)
library(GGally)
library(skimr)
install.packages("skimr")
install.packages("nycflights13")
library(skimr)
library(nycflights13)
library(tidymodels)
tidymodels_prefer()
```{r}
?flights
set.seed(123)
flights_data <-
flights |>
mutate(
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
date = lubridate::as_date(time_hour)
) |>
inner_join(weather, by = c("origin", "time_hour")) |>
select(dep_time,
flight,
origin,
dest,
air_time,
distance,
carrier,
date,
arr_delay,
time_hour) |>
na.omit() |>
mutate_if(is.character, as.factor)
flights_data
flights_data
flights_data |>
count(arr_delay)
flights_data |>
count(arr_delay) |>
mutate(prop = n/sum(n))
flights_data |> glimpse()
flights_data |>
skimr::skim()
set.seed(222)
data_split <- initial_split(data = flights_data, prop = 3/4)
train_data <- training(data_split)
test_data <-  testing(data_split)
flights_rec <-
recipe(arr_delay ~., data = train_data)
